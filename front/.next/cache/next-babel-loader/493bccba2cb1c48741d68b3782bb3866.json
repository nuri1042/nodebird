{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, call, put, take, takeEvery, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: \"ADD_POST_SUCCESS\",\n            data: result.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: \"ADD_POST_FAILURE\",\n            data: err.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n} // EventListener 와 같은 역할\n// take : action이 실행될 때 까지 기다림\n// take 가 일회성이라 while take 로 사용해야 함 -> 동기적으로 동작\n// while (true) {\n//   yield take(\"LOG_IN_REQUEST\", logIn);\n// }\n//\n// takeEvery -> 비동기적으로 동작\n// yield takeEvery(\"LOG_IN_REQUEST\", logIn);\n//\n// 버튼이 실수로 여러번 눌렸을 때 takeEvery 로 하면 두번 실행됨\n// 이 문제 방지 위해 사용하는 것이 takeLatest\n// takeLatest -> 앞의 클릭은 무시되고 마지막것만 실행함\n// front 에서 backEnd 로 보낸 여러 '요청'들은 취소 할 수 없고\n// BackEnd 로 부터 받는 '응답'은 마지막 하나를 제외하고 전부 취소함\n//\n// 여러 클릭 중에 첫번째만 실행하려면 takeLeading\n//\n// throttle -> 시간을 설정해두면 해당 시간동안에는 요청도 한번만 실행 할 수 있음\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(\"LOG_IN_REQUEST\", logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(\"LOG_OUT_REQUEST\", logOut);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(\"ADD_POST_REQUEST\", addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} // rootSaga에 만들고 싶은 비동기 action들을 넣어줌\n\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n          fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/sagas/index.js"],"names":["addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga","all","fork","call","put","take","takeEvery","takeLatest","delay","axios","addPostAPI","data","post","action","type","result","err","response","logIn","logOut"],"mappings":";;oDAeUA,O;qDAmCAC,U;qDAGAC,W;qDAGAC,Y;qDAKeC,Q;;AA7DzB,SACEC,GADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,GAJF,EAKEC,IALF,EAMEC,SANF,EAOEC,UAPF,EAQEC,KARF,QASO,oBATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AACD,SAAUf,OAAV,CAAkBiB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGI,iBAAML,KAAK,CAAC,IAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMJ,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAE,kBADE;AAERH,YAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASI,iBAAMP,GAAG,CAAC;AACRU,YAAAA,IAAI,EAAE,kBADE;AAERH,YAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFX,WAAD,CAAT;;AATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAUd,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMU,UAAU,CAAC,gBAAD,EAAmBW,KAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUpB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMS,UAAU,CAAC,iBAAD,EAAoBY,MAApB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUpB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,UAAU,CAAC,kBAAD,EAAqBX,OAArB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,eAAe,SAAUI,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACL,UAAD,CADI,EACU;AAClBK,UAAAA,IAAI,CAACJ,WAAD,CAFI,EAGRI,IAAI,CAACH,YAAD,CAHI,CAAD,CAAT;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n  all,\n  fork,\n  call,\n  put,\n  take,\n  takeEvery,\n  takeLatest,\n  delay,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data,\n    });\n  } catch {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\n// EventListener 와 같은 역할\n// take : action이 실행될 때 까지 기다림\n// take 가 일회성이라 while take 로 사용해야 함 -> 동기적으로 동작\n// while (true) {\n//   yield take(\"LOG_IN_REQUEST\", logIn);\n// }\n//\n// takeEvery -> 비동기적으로 동작\n// yield takeEvery(\"LOG_IN_REQUEST\", logIn);\n//\n// 버튼이 실수로 여러번 눌렸을 때 takeEvery 로 하면 두번 실행됨\n// 이 문제 방지 위해 사용하는 것이 takeLatest\n// takeLatest -> 앞의 클릭은 무시되고 마지막것만 실행함\n// front 에서 backEnd 로 보낸 여러 '요청'들은 취소 할 수 없고\n// BackEnd 로 부터 받는 '응답'은 마지막 하나를 제외하고 전부 취소함\n//\n// 여러 클릭 중에 첫번째만 실행하려면 takeLeading\n//\n// throttle -> 시간을 설정해두면 해당 시간동안에는 요청도 한번만 실행 할 수 있음\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n}\n\n// rootSaga에 만들고 싶은 비동기 action들을 넣어줌\nexport default function* rootSaga() {\n  // all : 배열을 받아서 해당 배열을 한번에 실행시킴\n  yield all([\n    fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n    fork(watchLogOut),\n    fork(watchAddPost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}