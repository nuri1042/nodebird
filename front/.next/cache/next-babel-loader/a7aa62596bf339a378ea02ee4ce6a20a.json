{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// SSR에 필요한 HYDRATE 를 위해 index 생성\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user from \"./user\";\nimport post from \"./post\";\nimport { combineReducers } from \"redux\";\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/reducers/index.js"],"names":["HYDRATE","user","post","combineReducers","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA;AACA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,MAAMC,WAAW,GAAGD,eAAe,CAAC;AAClCE,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC7B,YAAQA,MAAM,CAACC,IAAf;AACE,WAAKR,OAAL;AACES,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AACF;AACE,eAAOL,KAAP;AALJ;AAOD,GATiC;AAUlCL,EAAAA,IAVkC;AAWlCC,EAAAA;AAXkC,CAAD,CAAnC;AAcA,eAAeE,WAAf","sourcesContent":["// SSR에 필요한 HYDRATE 를 위해 index 생성\nimport { HYDRATE } from \"next-redux-wrapper\";\n\nimport user from \"./user\";\nimport post from \"./post\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log(\"HYDRATE\", action);\n        return { ...state, ...action.payload };\n      default:\n        return state;\n    }\n  },\n  user,\n  post,\n});\n\nexport default rootReducer;\n"]},"metadata":{},"sourceType":"module"}