{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n// Redux 에 initialState를 두면 이것을 다양한 컴포넌트에서 원할 때 사용 가능\nexport var initialState = {\n  isLoggingIn: false,\n  // 로그인 시도중\n  isLoggedIn: false,\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  me: null,\n  singUpData: {},\n  loginData: {}\n};\nexport var LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport var LOG_IN_SUCCCESS = \"LOG_IN_SUCCESS\";\nexport var LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nexport var LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport var LOG_OUT_SUCCCESS = \"LOG_OUT_SUCCESS\";\nexport var LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\nexport var SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport var SIGN_UP_SUCCCESS = \"SIGN_UP_SUCCESS\";\nexport var SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\nexport var FOLLOW_REQUEST = \"FOLLOW_REQUEST\";\nexport var FOLLOW_SUCCCESS = \"FOLLOW_SUCCESS\";\nexport var FOLLOW_FAILURE = \"FOLLOW_FAILURE\";\nexport var UNFOLLOW_REQUEST = \"UNFOLLOW_REQUEST\";\nexport var UNFOLLOW_SUCCCESS = \"UNFOLLOW_SUCCESS\";\nexport var UNFOLLOW_FAILURE = \"UNFOLLOW_FAILURE\"; // 사용자 입력에 따라 동적으로 action을 생성하는 'action creator'\n\nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: \"LOG_IN_REQUEST\",\n    data: data\n  };\n};\nexport var logoutRequestAction = function logoutRequestAction(data) {\n  return {\n    type: \"LOG_OUT_REQUEST\"\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"LOG_IN_REQUEST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: true\n      });\n\n    case \"LOG_IN_SUCCESS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: false,\n        isLoggedIn: true,\n        me: _objectSpread(_objectSpread({}, action.data), {}, {\n          nickname: \"nuri\"\n        })\n      });\n\n    case \"LOG_IN_FAILURE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: false,\n        isLoggedIn: false\n      });\n\n    case \"LOG_OUT_REQUEST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: true\n      });\n\n    case \"LOG_OUT_SUCCESS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: false,\n        isLoggedIn: false,\n        me: null\n      });\n\n    case \"LOG_OUT_FAILURE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/reducers/user.js"],"names":["initialState","isLoggingIn","isLoggedIn","isLoggingOut","me","singUpData","loginData","LOG_IN_REQUEST","LOG_IN_SUCCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCCESS","FOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCCESS","UNFOLLOW_FAILURE","loginRequestAction","data","type","logoutRequestAction","reducer","state","action","nickname"],"mappings":";;;;;;AAAA;AACA,OAAO,IAAMA,YAAY,GAAG;AAC1BC,EAAAA,WAAW,EAAE,KADa;AACN;AACpBC,EAAAA,UAAU,EAAE,KAFc;AAG1BC,EAAAA,YAAY,EAAE,KAHY;AAGL;AACrBC,EAAAA,EAAE,EAAE,IAJsB;AAK1BC,EAAAA,UAAU,EAAE,EALc;AAM1BC,EAAAA,SAAS,EAAE;AANe,CAArB;AASP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,eAAe,GAAG,gBAAxB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,gBAAgB,GAAG,iBAAzB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,gBAAgB,GAAG,iBAAzB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,eAAe,GAAG,gBAAxB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,iBAAiB,GAAG,kBAA1B;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB,C,CAEP;;AACA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAU;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAE,gBADD;AAELD,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACF,IAAD,EAAU;AAC3C,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;;AAMP,IAAME,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzB3B,YAAyB;AAAA,MAAX4B,MAAW;;AAChD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAK,gBAAL;AACE,6CACKG,KADL;AAEE1B,QAAAA,WAAW,EAAE;AAFf;;AAIF,SAAK,gBAAL;AACE,6CACK0B,KADL;AAEE1B,QAAAA,WAAW,EAAE,KAFf;AAGEC,QAAAA,UAAU,EAAE,IAHd;AAIEE,QAAAA,EAAE,kCAAOwB,MAAM,CAACL,IAAd;AAAoBM,UAAAA,QAAQ,EAAE;AAA9B;AAJJ;;AAMF,SAAK,gBAAL;AACE,6CACKF,KADL;AAEE1B,QAAAA,WAAW,EAAE,KAFf;AAGEC,QAAAA,UAAU,EAAE;AAHd;;AAKF,SAAK,iBAAL;AACE,6CACKyB,KADL;AAEExB,QAAAA,YAAY,EAAE;AAFhB;;AAIF,SAAK,iBAAL;AACE,6CACKwB,KADL;AAEExB,QAAAA,YAAY,EAAE,KAFhB;AAGED,QAAAA,UAAU,EAAE,KAHd;AAIEE,QAAAA,EAAE,EAAE;AAJN;;AAMF,SAAK,iBAAL;AACE,6CACKuB,KADL;AAEExB,QAAAA,YAAY,EAAE;AAFhB;;AAIF;AACE,aAAOwB,KAAP;AArCJ;AAuCD,CAxCD;;AA0CA,eAAeD,OAAf","sourcesContent":["// Redux 에 initialState를 두면 이것을 다양한 컴포넌트에서 원할 때 사용 가능\nexport const initialState = {\n  isLoggingIn: false, // 로그인 시도중\n  isLoggedIn: false,\n  isLoggingOut: false, // 로그아웃 시도중\n  me: null,\n  singUpData: {},\n  loginData: {},\n};\n\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport const LOG_IN_SUCCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\n\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport const LOG_OUT_SUCCCESS = \"LOG_OUT_SUCCESS\";\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\n\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport const SIGN_UP_SUCCCESS = \"SIGN_UP_SUCCESS\";\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\n\nexport const FOLLOW_REQUEST = \"FOLLOW_REQUEST\";\nexport const FOLLOW_SUCCCESS = \"FOLLOW_SUCCESS\";\nexport const FOLLOW_FAILURE = \"FOLLOW_FAILURE\";\n\nexport const UNFOLLOW_REQUEST = \"UNFOLLOW_REQUEST\";\nexport const UNFOLLOW_SUCCCESS = \"UNFOLLOW_SUCCESS\";\nexport const UNFOLLOW_FAILURE = \"UNFOLLOW_FAILURE\";\n\n// 사용자 입력에 따라 동적으로 action을 생성하는 'action creator'\nexport const loginRequestAction = (data) => {\n  return {\n    type: \"LOG_IN_REQUEST\",\n    data,\n  };\n};\n\nexport const logoutRequestAction = (data) => {\n  return {\n    type: \"LOG_OUT_REQUEST\",\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"LOG_IN_REQUEST\":\n      return {\n        ...state,\n        isLoggingIn: true,\n      };\n    case \"LOG_IN_SUCCESS\":\n      return {\n        ...state,\n        isLoggingIn: false,\n        isLoggedIn: true,\n        me: { ...action.data, nickname: \"nuri\" },\n      };\n    case \"LOG_IN_FAILURE\":\n      return {\n        ...state,\n        isLoggingIn: false,\n        isLoggedIn: false,\n      };\n    case \"LOG_OUT_REQUEST\":\n      return {\n        ...state,\n        isLoggingOut: true,\n      };\n    case \"LOG_OUT_SUCCESS\":\n      return {\n        ...state,\n        isLoggingOut: false,\n        isLoggedIn: false,\n        me: null,\n      };\n    case \"LOG_OUT_FAILURE\":\n      return {\n        ...state,\n        isLoggingOut: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}