{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"nuri\"\n    },\n    content: \"첫번째 게시글 #hashtag #익스프레스\",\n    Images: [{\n      src: \"https://gimg.gilbut.co.kr/book/BN003114/rn_view_BN003114.jpg\"\n    }, {\n      src: \"https://gimg.gilbut.co.kr/book/BN003326/rn_view_BN003326.jpg\"\n    }, {\n      src: \"https://gimg.gilbut.co.kr/book/BN002827/rn_view_BN002827.jpg\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"jam\"\n      },\n      content: \"신간이 출시되었군용ㅎ\"\n    }, {\n      User: {\n        nickname: \"네로\"\n      },\n      content: \"Hiiiiii~\"\n    }]\n  }],\n  imagePaths: [],\n  postAdded: false\n}; // action 객체 생성\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const addPost = {\n  type: ADD_POST_REQUEST\n};\nconst dummyPost = {\n  id: 2,\n  content: \"더미데이터 입니다\",\n  User: {\n    id: 1,\n    nickname: \"nuri\"\n  },\n  Images: [],\n  Comments: []\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost, ...state.mainPosts],\n        //dummyPost 를 앞에 추가해서 새로운 게시물이 가장 위로 가게 함\n        postAdded: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","postAdded","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","addPost","type","dummyPost","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CACT;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFR;AAMEC,IAAAA,OAAO,EAAE,yBANX;AAOEC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,GAAG,EAAE;AADP,KADM,EAIN;AACEA,MAAAA,GAAG,EAAE;AADP,KAJM,EAON;AACEA,MAAAA,GAAG,EAAE;AADP,KAPM,CAPV;AAkBEC,IAAAA,QAAQ,EAAE,CACR;AACEL,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KADQ,EAOR;AACEF,MAAAA,IAAI,EAAE;AACJC,QAAAA,QAAQ,EAAE;AADN,OADR;AAIEC,MAAAA,OAAO,EAAE;AAJX,KAPQ;AAlBZ,GADS,CADe;AAoC1BI,EAAAA,UAAU,EAAE,EApCc;AAqC1BC,EAAAA,SAAS,EAAE;AArCe,CAArB,C,CAwCP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,IAAI,EAAEJ;AADe,CAAhB;AAIP,MAAMK,SAAS,GAAG;AAChBd,EAAAA,EAAE,EAAE,CADY;AAEhBG,EAAAA,OAAO,EAAE,WAFO;AAGhBF,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN,GAHU;AAOhBE,EAAAA,MAAM,EAAE,EAPQ;AAQhBE,EAAAA,QAAQ,EAAE;AARM,CAAlB;;AAWA,MAAMS,OAAO,GAAG,CAACC,KAAK,GAAGlB,YAAT,EAAuBmB,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKH,gBAAL;AACE,6CACKM,KADL;AAEEjB,QAAAA,SAAS,EAAE,CAACe,SAAD,EAAY,GAAGE,KAAK,CAACjB,SAArB,CAFb;AAE8C;AAC5CS,QAAAA,SAAS,EAAE;AAHb;;AAKF;AACE,aAAOQ,KAAP;AARJ;AAUD,CAXD;;AAaA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: \"nuri\",\n      },\n      content: \"첫번째 게시글 #hashtag #익스프레스\",\n      Images: [\n        {\n          src: \"https://gimg.gilbut.co.kr/book/BN003114/rn_view_BN003114.jpg\",\n        },\n        {\n          src: \"https://gimg.gilbut.co.kr/book/BN003326/rn_view_BN003326.jpg\",\n        },\n        {\n          src: \"https://gimg.gilbut.co.kr/book/BN002827/rn_view_BN002827.jpg\",\n        },\n      ],\n      Comments: [\n        {\n          User: {\n            nickname: \"jam\",\n          },\n          content: \"신간이 출시되었군용ㅎ\",\n        },\n        {\n          User: {\n            nickname: \"네로\",\n          },\n          content: \"Hiiiiii~\",\n        },\n      ],\n    },\n  ],\n  imagePaths: [],\n  postAdded: false,\n};\n\n// action 객체 생성\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const addPost = {\n  type: ADD_POST_REQUEST,\n};\n\nconst dummyPost = {\n  id: 2,\n  content: \"더미데이터 입니다\",\n  User: {\n    id: 1,\n    nickname: \"nuri\",\n  },\n  Images: [],\n  Comments: [],\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_SUCCESS:\n      return {\n        ...state,\n        mainPosts: [dummyPost, ...state.mainPosts], //dummyPost 를 앞에 추가해서 새로운 게시물이 가장 위로 가게 함\n        postAdded: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}