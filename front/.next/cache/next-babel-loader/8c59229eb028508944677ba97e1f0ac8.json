{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n// Redux 에 initialState를 두면 이것을 다양한 컴포넌트에서 원할 때 사용 가능\nexport var initialState = {\n  isLoggedIn: false,\n  me: null,\n  singUpData: {},\n  loginData: {}\n}; // 사용자 입력에 따라 동적으로 action을 생성하는 'action creator'\n\nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: \"LOG_IN\",\n    data: data\n  };\n};\nexport var logoutRequestAction = function logoutRequestAction(data) {\n  return {\n    type: \"LOG_OUT\"\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"LOG_IN_REQUEST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggedIn: true,\n        me: action.data\n      });\n\n    case \"LOG_OUT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggedIn: false,\n        me: null\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/reducers/user.js"],"names":["initialState","isLoggedIn","me","singUpData","loginData","loginRequestAction","data","type","logoutRequestAction","reducer","state","action"],"mappings":";;;;;;AAAA;AACA,OAAO,IAAMA,YAAY,GAAG;AAC1BC,EAAAA,UAAU,EAAE,KADc;AAE1BC,EAAAA,EAAE,EAAE,IAFsB;AAG1BC,EAAAA,UAAU,EAAE,EAHc;AAI1BC,EAAAA,SAAS,EAAE;AAJe,CAArB,C,CAOP;;AACA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAU;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELD,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM;AAMP,OAAO,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACF,IAAD,EAAU;AAC3C,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;;AAMP,IAAME,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBV,YAAyB;AAAA,MAAXW,MAAW;;AAChD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAK,gBAAL;AACE,6CACKG,KADL;AAEET,QAAAA,UAAU,EAAE,IAFd;AAGEC,QAAAA,EAAE,EAAES,MAAM,CAACL;AAHb;;AAKF,SAAK,SAAL;AACE,6CACKI,KADL;AAEET,QAAAA,UAAU,EAAE,KAFd;AAGEC,QAAAA,EAAE,EAAE;AAHN;;AAKF;AACE,aAAOQ,KAAP;AAdJ;AAgBD,CAjBD;;AAmBA,eAAeD,OAAf","sourcesContent":["// Redux 에 initialState를 두면 이것을 다양한 컴포넌트에서 원할 때 사용 가능\nexport const initialState = {\n  isLoggedIn: false,\n  me: null,\n  singUpData: {},\n  loginData: {},\n};\n\n// 사용자 입력에 따라 동적으로 action을 생성하는 'action creator'\nexport const loginRequestAction = (data) => {\n  return {\n    type: \"LOG_IN\",\n    data,\n  };\n};\nexport const logoutRequestAction = (data) => {\n  return {\n    type: \"LOG_OUT\",\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"LOG_IN_REQUEST\":\n      return {\n        ...state,\n        isLoggedIn: true,\n        me: action.data,\n      };\n    case \"LOG_OUT\":\n      return {\n        ...state,\n        isLoggedIn: false,\n        me: null,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}