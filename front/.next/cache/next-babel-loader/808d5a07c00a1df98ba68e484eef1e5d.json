{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, call, put, take, takeEvery, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\"; // EventListener 와 같은 역할\n// take : action이 실행될 때 까지 기다림\n// take 가 일회성이라 while take 로 사용해야 함 -> 동기적으로 동작\n// while (true) {\n//   yield take(\"LOG_IN_REQUEST\", logIn);\n// }\n//\n// takeEvery -> 비동기적으로 동작\n// yield takeEvery(\"LOG_IN_REQUEST\", logIn);\n//\n// 버튼이 실수로 여러번 눌렸을 때 takeEvery 로 하면 두번 실행됨\n// 이 문제 방지 위해 사용하는 것이 takeLatest\n// takeLatest -> 앞의 클릭은 무시되고 마지막것만 실행함\n// front 에서 backEnd 로 보낸 여러 '요청'들은 취소 할 수 없고\n// BackEnd 로 부터 받는 '응답'은 마지막 하나를 제외하고 전부 취소함\n//\n// 여러 클릭 중에 첫번째만 실행하려면 takeLeading\n//\n// throttle -> 시간을 설정해두면 해당 시간동안에는 요청도 한번만 실행 할 수 있음\n// rootSaga에 만들고 싶은 비동기 action들을 넣어줌\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n          fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/sagas/index.js"],"names":["rootSaga","all","fork","call","put","take","takeEvery","takeLatest","delay","axios","watchLogIn","watchLogOut","watchAddPost"],"mappings":";;oDAiCyBA,Q;;AAjCzB,SACEC,GADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,GAJF,EAKEC,IALF,EAMEC,SANF,EAOEC,UAPF,EAQEC,KARF,QASO,oBATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,eAAe,SAAUT,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACQ,UAAD,CADI,EACU;AAClBR,UAAAA,IAAI,CAACS,WAAD,CAFI,EAGRT,IAAI,CAACU,YAAD,CAHI,CAAD,CAAT;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n  all,\n  fork,\n  call,\n  put,\n  take,\n  takeEvery,\n  takeLatest,\n  delay,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n// EventListener 와 같은 역할\n// take : action이 실행될 때 까지 기다림\n// take 가 일회성이라 while take 로 사용해야 함 -> 동기적으로 동작\n// while (true) {\n//   yield take(\"LOG_IN_REQUEST\", logIn);\n// }\n//\n// takeEvery -> 비동기적으로 동작\n// yield takeEvery(\"LOG_IN_REQUEST\", logIn);\n//\n// 버튼이 실수로 여러번 눌렸을 때 takeEvery 로 하면 두번 실행됨\n// 이 문제 방지 위해 사용하는 것이 takeLatest\n// takeLatest -> 앞의 클릭은 무시되고 마지막것만 실행함\n// front 에서 backEnd 로 보낸 여러 '요청'들은 취소 할 수 없고\n// BackEnd 로 부터 받는 '응답'은 마지막 하나를 제외하고 전부 취소함\n//\n// 여러 클릭 중에 첫번째만 실행하려면 takeLeading\n//\n// throttle -> 시간을 설정해두면 해당 시간동안에는 요청도 한번만 실행 할 수 있음\n\n// rootSaga에 만들고 싶은 비동기 action들을 넣어줌\nexport default function* rootSaga() {\n  // all : 배열을 받아서 해당 배열을 한번에 실행시킴\n  yield all([\n    fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n    fork(watchLogOut),\n    fork(watchAddPost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}