{"ast":null,"code":"import { all, fork, call, put, take } from \"redux-saga/effects\";\nimport axios from \"axios\"; // 예외적으로 generator 아님\n\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logIn() {\n  try {\n    // call : 동기 함수 호출 (결과를 기다렸다가 다음 실행)\n    // fork : 비동기 함수 호출\n    const result = yield call(logInAPI); // put : dispatch 와 같은 역할, action을 dispatch 한다고 생각\n\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield take(\"LOG_IN_REQUEST\", logIn); // take : action이 실행될 때 까지 기다림\n}\n\nfunction* watchLogOut() {\n  yield take(\"LOG_OUT_REQUEST\");\n}\n\nfunction* watchAddPost() {\n  yield take(\"ADD_POST_REQUEST\");\n} // rootSaga에 만들고 싶은 비동기 action들을 넣어줌\n\n\nexport default function* rootSaga() {\n  // all : 배열을 받아서 해당 배열을 한번에 실행시킴\n  yield all([fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n  fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/sagas/index.js"],"names":["all","fork","call","put","take","axios","logInAPI","post","logOutAPI","logIn","result","type","data","err","response","logOut","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACD;;AACD,SAASC,SAAT,GAAqB;AACnB,SAAOH,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUE,KAAV,GAAkB;AAChB,MAAI;AACF;AACA;AACA,UAAMC,MAAM,GAAG,MAAMR,IAAI,CAACI,QAAD,CAAzB,CAHE,CAIF;;AACA,UAAMH,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,gBADE;AAERC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GATD,CASE,MAAM;AACN,UAAMT,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,gBADE;AAERC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUG,MAAV,GAAmB;AACjB,MAAI;AACF,UAAML,MAAM,GAAG,MAAMR,IAAI,CAACM,SAAD,CAAzB;AACA,UAAML,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,iBADE;AAERC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,MAAM;AACN,UAAMT,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAE,iBADE;AAERC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFX,KAAD,CAAT;AAID;AACF;;AAED,UAAUI,UAAV,GAAuB;AACrB,QAAMZ,IAAI,CAAC,gBAAD,EAAmBK,KAAnB,CAAV,CADqB,CACgB;AACtC;;AACD,UAAUQ,WAAV,GAAwB;AACtB,QAAMb,IAAI,CAAC,iBAAD,CAAV;AACD;;AACD,UAAUc,YAAV,GAAyB;AACvB,QAAMd,IAAI,CAAC,kBAAD,CAAV;AACD,C,CAED;;;AACA,eAAe,UAAUe,QAAV,GAAqB;AAClC;AACA,QAAMnB,GAAG,CAAC,CACRC,IAAI,CAACe,UAAD,CADI,EACU;AAClBf,EAAAA,IAAI,CAACgB,WAAD,CAFI,EAGRhB,IAAI,CAACiB,YAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { all, fork, call, put, take } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n// 예외적으로 generator 아님\nfunction logInAPI() {\n  return axios.post(\"/api/login\");\n}\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logIn() {\n  try {\n    // call : 동기 함수 호출 (결과를 기다렸다가 다음 실행)\n    // fork : 비동기 함수 호출\n    const result = yield call(logInAPI);\n    // put : dispatch 와 같은 역할, action을 dispatch 한다고 생각\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data,\n    });\n  } catch {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data,\n    });\n  } catch {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield take(\"LOG_IN_REQUEST\", logIn); // take : action이 실행될 때 까지 기다림\n}\nfunction* watchLogOut() {\n  yield take(\"LOG_OUT_REQUEST\");\n}\nfunction* watchAddPost() {\n  yield take(\"ADD_POST_REQUEST\");\n}\n\n// rootSaga에 만들고 싶은 비동기 action들을 넣어줌\nexport default function* rootSaga() {\n  // all : 배열을 받아서 해당 배열을 한번에 실행시킴\n  yield all([\n    fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n    fork(watchLogOut),\n    fork(watchAddPost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}