{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n}; //  faker 사용해서 데이터 만들기\n\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraphs(),\n  Images: [{\n    id: shortId.generate(),\n    src: faker.image.image()\n  }],\n  Comments: [{\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost()); // action 객체 생성\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE'; // 동적 action creator\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'nuri'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'nuri'\n  }\n}); // reducer : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성 지키면서)\n\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v)=> v.id === action.data.postId);\n          // const post = state.mainPosts[postIndex];\n          // const Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = {...post, Comments}\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        return state;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","addPostLoading","addPostDone","addPostError","loadPostsLoading","loadPostsDone","loadPostsError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraphs","Images","src","image","Comments","sentence","concat","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","length","error","unshift","post","find","v","postId","filter"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n};\n\n//  faker 사용해서 데이터 만들기\nexport const generateDummyPost = (number) =>\n  Array(number)\n    .fill()\n    .map(() => ({\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n      },\n      content: faker.lorem.paragraphs(),\n      Images: [\n        {\n          id: shortId.generate(),\n          src: faker.image.image(),\n        },\n      ],\n      Comments: [\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n          },\n          content: faker.lorem.sentence(),\n        },\n      ],\n    }));\n\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost());\n\n// action 객체 생성\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\n// 동적 action creator\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'nuri',\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'nuri',\n  },\n});\n\n// reducer : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePost = draft.mainPosts.length < 50;\n        break;\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((v)=> v.id === action.data.postId);\n        // const post = state.mainPosts[postIndex];\n        // const Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = {...post, Comments}\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      default:\n        return state;\n    }\n  });\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}