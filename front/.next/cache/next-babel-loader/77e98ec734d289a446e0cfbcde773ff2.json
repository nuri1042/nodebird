{"ast":null,"code":"/* eslint-disable no-unused-vars */\nimport { all, fork, delay, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/api/post/`, data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.delete(`/api/post/`, data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/sagas/post.js"],"names":["all","fork","delay","put","takeLatest","axios","shortId","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","post","addPost","action","id","generate","type","content","err","response","addCommentAPI","postId","addComment","removePostAPI","delete","removePost","loadPostsAPI","loadPosts","watchLoadPosts","watchRemovePost","watchAddPost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\nimport {all, fork, delay, put, takeLatest} from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport {\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n} from '../reducers/post';\nimport {ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/api/post/`, data);\n}\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.delete(`/api/post/`, data);\n}\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\nexport default function* postSaga() {\n  yield all([fork(watchLoadPosts), fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}\n"]},"metadata":{},"sourceType":"module"}