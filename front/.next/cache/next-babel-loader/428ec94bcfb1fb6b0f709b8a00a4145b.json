{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunkMiddleWare from \"redux-thunk\";\nimport reducer from \"../reducers/index\"; // middleWare 는 항상 화살표 3개를 가지는 고차함수\n\nconst loggerMiddleWare = ({\n  dispatch,\n  getState\n}) => next => action => {\n  // action은 원래 객체인데 thunk 는 action을 function으로 둘 수 있음\n  // action 이 function이면 지연함수이기 때문에 action을 나중에 실행해줄 수 있음\n  if (typeof action === \"function\") {\n    return action(dispatch, getState);\n  }\n\n  return next(action);\n};\n\nconst configureStore = () => {\n  // middlewares : redux의 기능을 향상시켜주는 것, 없던 기능 추가해줌\n  const middlewares = [thunkMiddleWare];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","thunkMiddleWare","reducer","loggerMiddleWare","dispatch","getState","next","action","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,OAAOC,OAAP,MAAoB,mBAApB,C,CAEA;;AACA,MAAMC,gBAAgB,GACpB,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KACCC,IAAD,IACCC,MAAD,IAAY;AACV;AACA;AACA,MAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AAChC,WAAOA,MAAM,CAACH,QAAD,EAAWC,QAAX,CAAb;AACD;;AACD,SAAOC,IAAI,CAACC,MAAD,CAAX;AACD,CAVH;;AAYA,MAAMC,cAAc,GAAG,MAAM;AAC3B;AACA,QAAMC,WAAW,GAAG,CAACR,eAAD,CAApB;AACA,QAAMS,QAAQ,GACZ,QACIZ,OAAO,CAACD,eAAe,CAAC,GAAGY,WAAJ,CAAhB,CADX,GAEIT,mBAAmB,CAACH,eAAe,CAAC,GAAGY,WAAJ,CAAhB,CAHzB;AAIA,QAAME,KAAK,GAAGZ,WAAW,CAACG,OAAD,EAAUQ,QAAV,CAAzB;AACA,SAAOC,KAAP;AACD,CATD;;AAWA,MAAMC,OAAO,GAAGhB,aAAa,CAACY,cAAD,EAAiB;AAC5CK,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunkMiddleWare from \"redux-thunk\";\n\nimport reducer from \"../reducers/index\";\n\n// middleWare 는 항상 화살표 3개를 가지는 고차함수\nconst loggerMiddleWare =\n  ({ dispatch, getState }) =>\n  (next) =>\n  (action) => {\n    // action은 원래 객체인데 thunk 는 action을 function으로 둘 수 있음\n    // action 이 function이면 지연함수이기 때문에 action을 나중에 실행해줄 수 있음\n    if (typeof action === \"function\") {\n      return action(dispatch, getState);\n    }\n    return next(action);\n  };\n\nconst configureStore = () => {\n  // middlewares : redux의 기능을 향상시켜주는 것, 없던 기능 추가해줌\n  const middlewares = [thunkMiddleWare];\n  const enhancer =\n    process.env.NODE_ENV === \"production\"\n      ? compose(applyMiddleware(...middlewares))\n      : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: process.env.NODE_ENV === \"development\",\n});\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}