{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\"; // 예외적으로 generator 아님\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: \"LOG_IN_SUCCESS\",\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: \"LOG_IN_FAILURE\",\n            data: err.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction logOut() {\n  var result;\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: \"LOG_OUT_SUCCESS\",\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: \"LOG_OUT_FAILURE\",\n            data: err.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: \"ADD_POST_SUCCESS\",\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: \"ADD_POST_FAILURE\",\n            data: err.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n} // EventListener 와 같은 역할\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!true) {\n            _context4.next = 5;\n            break;\n          }\n\n          _context4.next = 3;\n          return take(\"LOG_IN_REQUEST\", logIn);\n\n        case 3:\n          _context4.next = 0;\n          break;\n\n        case 5:\n          _context4.next = 7;\n          return takeEvery(\"LOG_IN_REQUEST\", logIn);\n\n        case 7:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return take(\"LOG_OUT_REQUEST\", logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return take(\"ADD_POST_REQUEST\", addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} // rootSaga에 만들고 싶은 비동기 action들을 넣어줌\n\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n          fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/sagas/index.js"],"names":["logIn","logOut","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga","all","fork","call","put","take","takeEvery","axios","logInAPI","data","post","action","result","type","err","response","logOutAPI","addPostAPI"],"mappings":"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","sourcesContent":["import { all, fork, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n// 예외적으로 generator 아님\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    // call : 동기 함수 호출 (결과를 기다렸다가 다음 실행)\n    // fork : 비동기 함수 호출\n    const result = yield call(logInAPI, action.data);\n    // put : dispatch 와 같은 역할, action을 dispatch 한다고 생각\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data,\n    });\n  } catch {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data,\n    });\n  } catch {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data,\n    });\n  } catch {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\n// EventListener 와 같은 역할\nfunction* watchLogIn() {\n  // take : action이 실행될 때 까지 기다림\n  while (true) {\n    yield take(\"LOG_IN_REQUEST\", logIn);\n  }\n  yield takeEvery(\"LOG_IN_REQUEST\", logIn);\n}\nfunction* watchLogOut() {\n  yield take(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield take(\"ADD_POST_REQUEST\", addPost);\n}\n\n// rootSaga에 만들고 싶은 비동기 action들을 넣어줌\nexport default function* rootSaga() {\n  // all : 배열을 받아서 해당 배열을 한번에 실행시킴\n  yield all([\n    fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n    fork(watchLogOut),\n    fork(watchAddPost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}