{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'nuri'\n    },\n    content: '첫번째 게시글 #hashtag #익스프레스',\n    Images: [{\n      src: 'https://gimg.gilbut.co.kr/book/BN003114/rn_view_BN003114.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN003326/rn_view_BN003326.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN002827/rn_view_BN002827.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'jam'\n      },\n      content: '신간이 출시되었군용ㅎ'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: '네로'\n      },\n      content: 'Hiiiiii~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // action 객체 생성\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; // 동적 action creator\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: shortId.generate(),\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'nuri'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'nuri'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        //dummyPost 를 앞에 추가해서 새로운 게시물이 가장 위로 가게 함\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCmmentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n        const post = state.mainPosts[postIndex];\n        const Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = _objectSpread(_objectSpread({}, post), {}, {\n          Comments\n        });\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCmmentLoading: false,\n        addCmmentError: action.arror\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","generate","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","error","addCmmentError","postIndex","findIndex","v","postId","post","addCmmentLoading","arror"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\n\nexport const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: 'nuri',\n      },\n      content: '첫번째 게시글 #hashtag #익스프레스',\n      Images: [\n        {\n          src: 'https://gimg.gilbut.co.kr/book/BN003114/rn_view_BN003114.jpg',\n        },\n        {\n          src: 'https://gimg.gilbut.co.kr/book/BN003326/rn_view_BN003326.jpg',\n        },\n        {\n          src: 'https://gimg.gilbut.co.kr/book/BN002827/rn_view_BN002827.jpg',\n        },\n      ],\n      Comments: [\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: 'jam',\n          },\n          content: '신간이 출시되었군용ㅎ',\n        },\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: '네로',\n          },\n          content: 'Hiiiiii~',\n        },\n      ],\n    },\n  ],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n};\n\n// action 객체 생성\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n// 동적 action creator\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummyPost = (data) => ({\n  id: shortId.generate(),\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'nuri',\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'nuri',\n  },\n})\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return {\n        ...state,\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null,\n      };\n    case ADD_POST_SUCCESS:\n      return {\n        ...state,\n        mainPosts: [dummyPost(action.data), ...state.mainPosts], //dummyPost 를 앞에 추가해서 새로운 게시물이 가장 위로 가게 함\n        addPostLoading: false,\n        addPostDone: true,\n      };\n    case ADD_POST_FAILURE:\n      return {\n        ...state,\n        addPostLoading: false,\n        addPostError: action.error,\n      };\n    case ADD_COMMENT_REQUEST:\n      return {\n        ...state,\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCmmentError: null,\n      };\n    case ADD_COMMENT_SUCCESS:{\n      const postIndex = state.mainPosts.findIndex((v)=> v.id === action.data.postId);\n      const post = state.mainPosts[postIndex];\n      const Comments = [dummyComment(action.data.content), ...post.Comments];\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = {...post, Comments}\n      return {\n        ...state,\n        mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true,\n      };\n    }\n    case ADD_COMMENT_FAILURE:\n      return {\n        ...state,\n        addCmmentLoading: false,\n        addCmmentError: action.arror,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}