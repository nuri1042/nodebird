{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Redux 에 initialState를 두면 이것을 다양한 컴포넌트에서 원할 때 사용 가능\nexport const initialState = {\n  isLoggingIn: false,\n  // 로그인 시도중\n  isLoggedIn: false,\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  me: null,\n  singUpData: {},\n  loginData: {}\n}; // 사용자 입력에 따라 동적으로 action을 생성하는 'action creator'\n\nexport const loginRequestAction = data => {\n  return {\n    type: \"LOG_IN_REQUEST\",\n    data\n  };\n};\nexport const loginSuccessAction = data => {\n  return {\n    type: \"LOG_IN_SUCCESS\",\n    data\n  };\n};\nexport const loginFailureAction = data => {\n  return {\n    type: \"LOG_IN_FAILURE\",\n    data\n  };\n};\nexport const logoutRequestAction = data => {\n  return {\n    type: \"LOG_OUT_REQUEST\"\n  };\n};\nexport const logoutSuccessAction = data => {\n  return {\n    type: \"LOG_OUT_SUCCESS\"\n  };\n};\nexport const logoutFailureAction = data => {\n  return {\n    type: \"LOG_OUT_FAILURE\"\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"LOG_IN_REQUEST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: true\n      });\n\n    case \"LOG_IN_SUCCESS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: false,\n        isLoggedIn: true,\n        me: action.data\n      });\n\n    case \"LOG_IN_FAILURE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingIn: false,\n        isLoggedIn: false\n      });\n\n    case \"LOG_OUT_REQUEST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: true\n      });\n\n    case \"LOG_OUT_SUCCESS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: false,\n        isLoggedIn: false,\n        me: null\n      });\n\n    case \"LOG_OUT_FAILURE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggingOut: false,\n        me: null\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/reducers/user.js"],"names":["initialState","isLoggingIn","isLoggedIn","isLoggingOut","me","singUpData","loginData","loginRequestAction","data","type","loginSuccessAction","loginFailureAction","logoutRequestAction","logoutSuccessAction","logoutFailureAction","reducer","state","action"],"mappings":";;;;;;AAAA;AACA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,WAAW,EAAE,KADa;AACN;AACpBC,EAAAA,UAAU,EAAE,KAFc;AAG1BC,EAAAA,YAAY,EAAE,KAHY;AAGL;AACrBC,EAAAA,EAAE,EAAE,IAJsB;AAK1BC,EAAAA,UAAU,EAAE,EALc;AAM1BC,EAAAA,SAAS,EAAE;AANe,CAArB,C,CASP;;AACA,OAAO,MAAMC,kBAAkB,GAAIC,IAAD,IAAU;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAE,gBADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAMP,OAAO,MAAME,kBAAkB,GAAIF,IAAD,IAAU;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAE,gBADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAMP,OAAO,MAAMG,kBAAkB,GAAIH,IAAD,IAAU;AAC1C,SAAO;AACLC,IAAAA,IAAI,EAAE,gBADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAMP,OAAO,MAAMI,mBAAmB,GAAIJ,IAAD,IAAU;AAC3C,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAKP,OAAO,MAAMI,mBAAmB,GAAIL,IAAD,IAAU;AAC3C,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAKP,OAAO,MAAMK,mBAAmB,GAAIN,IAAD,IAAU;AAC3C,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;;AAMP,MAAMM,OAAO,GAAG,CAACC,KAAK,GAAGhB,YAAT,EAAuBiB,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACR,IAAf;AACE,SAAK,gBAAL;AACE,6CACKO,KADL;AAEEf,QAAAA,WAAW,EAAE;AAFf;;AAIF,SAAK,gBAAL;AACE,6CACKe,KADL;AAEEf,QAAAA,WAAW,EAAE,KAFf;AAGEC,QAAAA,UAAU,EAAE,IAHd;AAIEE,QAAAA,EAAE,EAAEa,MAAM,CAACT;AAJb;;AAMF,SAAK,gBAAL;AACE,6CACKQ,KADL;AAEEf,QAAAA,WAAW,EAAE,KAFf;AAGEC,QAAAA,UAAU,EAAE;AAHd;;AAKF,SAAK,iBAAL;AACE,6CACKc,KADL;AAEEb,QAAAA,YAAY,EAAE;AAFhB;;AAIF,SAAK,iBAAL;AACE,6CACKa,KADL;AAEEb,QAAAA,YAAY,EAAE,KAFhB;AAGED,QAAAA,UAAU,EAAE,KAHd;AAIEE,QAAAA,EAAE,EAAE;AAJN;;AAMF,SAAK,iBAAL;AACE,6CACKY,KADL;AAEEb,QAAAA,YAAY,EAAE,KAFhB;AAGEC,QAAAA,EAAE,EAAE;AAHN;;AAKF;AACE,aAAOY,KAAP;AAtCJ;AAwCD,CAzCD;;AA2CA,eAAeD,OAAf","sourcesContent":["// Redux 에 initialState를 두면 이것을 다양한 컴포넌트에서 원할 때 사용 가능\nexport const initialState = {\n  isLoggingIn: false, // 로그인 시도중\n  isLoggedIn: false,\n  isLoggingOut: false, // 로그아웃 시도중\n  me: null,\n  singUpData: {},\n  loginData: {},\n};\n\n// 사용자 입력에 따라 동적으로 action을 생성하는 'action creator'\nexport const loginRequestAction = (data) => {\n  return {\n    type: \"LOG_IN_REQUEST\",\n    data,\n  };\n};\nexport const loginSuccessAction = (data) => {\n  return {\n    type: \"LOG_IN_SUCCESS\",\n    data,\n  };\n};\nexport const loginFailureAction = (data) => {\n  return {\n    type: \"LOG_IN_FAILURE\",\n    data,\n  };\n};\nexport const logoutRequestAction = (data) => {\n  return {\n    type: \"LOG_OUT_REQUEST\",\n  };\n};\nexport const logoutSuccessAction = (data) => {\n  return {\n    type: \"LOG_OUT_SUCCESS\",\n  };\n};\nexport const logoutFailureAction = (data) => {\n  return {\n    type: \"LOG_OUT_FAILURE\",\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"LOG_IN_REQUEST\":\n      return {\n        ...state,\n        isLoggingIn: true,\n      };\n    case \"LOG_IN_SUCCESS\":\n      return {\n        ...state,\n        isLoggingIn: false,\n        isLoggedIn: true,\n        me: action.data,\n      };\n    case \"LOG_IN_FAILURE\":\n      return {\n        ...state,\n        isLoggingIn: false,\n        isLoggedIn: false,\n      };\n    case \"LOG_OUT_REQUEST\":\n      return {\n        ...state,\n        isLoggingOut: true,\n      };\n    case \"LOG_OUT_SUCCESS\":\n      return {\n        ...state,\n        isLoggingOut: false,\n        isLoggedIn: false,\n        me: null,\n      };\n    case \"LOG_OUT_FAILURE\":\n      return {\n        ...state,\n        isLoggingOut: false,\n        me: null,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}