{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducer from \"../reducers/index\"; // middleWare 는 항상 화살표 3개를 가지는 고차함수\n\nconst loggerMiddleWare = ({\n  dispatch,\n  getState\n}) => next => action => {\n  // action은 원래 객체인데 thunk 는 action을 function으로 둘 수 있음\n  // action 이 function이면 지연함수이기 때문에 action을 나중에 실행해줄 수 있음\n  // if (typeof action === \"function\") {\n  //   return action(dispatch, getState);\n  // }\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  // middlewares : redux의 기능을 향상시켜주는 것, 없던 기능 추가해줌\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleWare];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","createSagaMiddleware","reducer","loggerMiddleWare","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,mBAApB,C,CAEA;;AACA,MAAMC,gBAAgB,GACpB,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KACCC,IAAD,IACCC,MAAD,IAAY;AACV;AACA;AACA;AACA;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACD,CAXH;;AAaA,MAAMG,cAAc,GAAG,MAAM;AAC3B;AACA,QAAMC,cAAc,GAAGV,oBAAoB,EAA3C;AACA,QAAMW,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB;AACA,QAAMU,QAAQ,GACZ,QACIf,OAAO,CAACD,eAAe,CAAC,GAAGe,WAAJ,CAAhB,CADX,GAEIZ,mBAAmB,CAACH,eAAe,CAAC,GAAGe,WAAJ,CAAhB,CAHzB;AAIA,QAAME,KAAK,GAAGf,WAAW,CAACG,OAAD,EAAUW,QAAV,CAAzB;AACA,SAAOC,KAAP;AACD,CAVD;;AAYA,MAAMC,OAAO,GAAGnB,aAAa,CAACc,cAAD,EAAiB;AAC5CM,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from \"next-redux-wrapper\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport reducer from \"../reducers/index\";\n\n// middleWare 는 항상 화살표 3개를 가지는 고차함수\nconst loggerMiddleWare =\n  ({ dispatch, getState }) =>\n  (next) =>\n  (action) => {\n    // action은 원래 객체인데 thunk 는 action을 function으로 둘 수 있음\n    // action 이 function이면 지연함수이기 때문에 action을 나중에 실행해줄 수 있음\n    // if (typeof action === \"function\") {\n    //   return action(dispatch, getState);\n    // }\n    console.log(action);\n    return next(action);\n  };\n\nconst configureStore = () => {\n  // middlewares : redux의 기능을 향상시켜주는 것, 없던 기능 추가해줌\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleWare];\n  const enhancer =\n    process.env.NODE_ENV === \"production\"\n      ? compose(applyMiddleware(...middlewares))\n      : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: process.env.NODE_ENV === \"development\",\n});\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}