{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: 'nuri'\n    },\n    content: '첫번째 게시글 #hashtag #익스프레스',\n    Images: [{\n      i: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN003114/rn_view_BN003114.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN003326/rn_view_BN003326.jpg'\n    }, {\n      id: shortId.generate(),\n      src: 'https://gimg.gilbut.co.kr/book/BN002827/rn_view_BN002827.jpg'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: 'jam'\n      },\n      content: '신간이 출시되었군용ㅎ'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: '네로'\n      },\n      content: 'Hiiiiii~'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n}; //  faker 사용해서 데이터 만들기\n\ninitialState.mainPosts.concat.Array(20).fill().map((v, i) => {}); // action 객체 생성\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE'; // 동적 action creator\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'nuri'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'nuri'\n  }\n}); // reducer : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성 지키면서)\n\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v)=> v.id === action.data.postId);\n          // const post = state.mainPosts[postIndex];\n          // const Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = {...post, Comments}\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        return state;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","i","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","concat","Array","fill","map","v","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","post","find","postId","filter"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CACT;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFR;AAMEC,IAAAA,OAAO,EAAE,yBANX;AAOEC,IAAAA,MAAM,EAAE,CACN;AACEC,MAAAA,CAAC,EAAEV,OAAO,CAACW,QAAR,EADL;AAEEC,MAAAA,GAAG,EAAE;AAFP,KADM,EAKN;AACEP,MAAAA,EAAE,EAAEL,OAAO,CAACW,QAAR,EADN;AAEEC,MAAAA,GAAG,EAAE;AAFP,KALM,EASN;AACEP,MAAAA,EAAE,EAAEL,OAAO,CAACW,QAAR,EADN;AAEEC,MAAAA,GAAG,EAAE;AAFP,KATM,CAPV;AAqBEC,IAAAA,QAAQ,EAAE,CACR;AACER,MAAAA,EAAE,EAAEL,OAAO,CAACW,QAAR,EADN;AAEEL,MAAAA,IAAI,EAAE;AACJD,QAAAA,EAAE,EAAEL,OAAO,CAACW,QAAR,EADA;AAEJJ,QAAAA,QAAQ,EAAE;AAFN,OAFR;AAMEC,MAAAA,OAAO,EAAE;AANX,KADQ,EASR;AACEH,MAAAA,EAAE,EAAEL,OAAO,CAACW,QAAR,EADN;AAEEL,MAAAA,IAAI,EAAE;AACJD,QAAAA,EAAE,EAAEL,OAAO,CAACW,QAAR,EADA;AAEJJ,QAAAA,QAAQ,EAAE;AAFN,OAFR;AAMEC,MAAAA,OAAO,EAAE;AANX,KATQ;AArBZ,GADS,CADe;AA2C1BM,EAAAA,UAAU,EAAE,EA3Cc;AA4C1BC,EAAAA,cAAc,EAAE,KA5CU;AA6C1BC,EAAAA,WAAW,EAAE,KA7Ca;AA8C1BC,EAAAA,YAAY,EAAE,IA9CY;AA+C1BC,EAAAA,iBAAiB,EAAE,KA/CO;AAgD1BC,EAAAA,cAAc,EAAE,KAhDU;AAiD1BC,EAAAA,eAAe,EAAE,IAjDS;AAkD1BC,EAAAA,iBAAiB,EAAE,KAlDO;AAmD1BC,EAAAA,cAAc,EAAE,KAnDU;AAoD1BC,EAAAA,eAAe,EAAE;AApDS,CAArB,C,CAuDP;;AACApB,YAAY,CAACC,SAAb,CAAuBoB,MAAvB,CACGC,KADH,CACS,EADT,EAEGC,IAFH,GAGGC,GAHH,CAGO,CAACC,CAAD,EAAIlB,CAAJ,KAAU,CAAE,CAHnB,E,CAKA;;AACA,OAAO,MAAMmB,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B,C,CAEP;;AACA,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAEX,gBAD0B;AAEhCU,EAAAA;AAFgC,CAAX,CAAhB;AAIP,OAAO,MAAME,UAAU,GAAIF,IAAD,KAAW;AACnCC,EAAAA,IAAI,EAAER,mBAD6B;AAEnCO,EAAAA;AAFmC,CAAX,CAAnB;;AAKP,MAAMG,SAAS,GAAIH,IAAD,KAAW;AAC3BlC,EAAAA,EAAE,EAAEkC,IAAI,CAAClC,EADkB;AAE3BG,EAAAA,OAAO,EAAE+B,IAAI,CAAC/B,OAFa;AAG3BF,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN,GAHqB;AAO3BE,EAAAA,MAAM,EAAE,EAPmB;AAQ3BI,EAAAA,QAAQ,EAAE;AARiB,CAAX,CAAlB;;AAWA,MAAM8B,YAAY,GAAIJ,IAAD,KAAW;AAC9BlC,EAAAA,EAAE,EAAEL,OAAO,CAACW,QAAR,EAD0B;AAE9BH,EAAAA,OAAO,EAAE+B,IAFqB;AAG9BjC,EAAAA,IAAI,EAAE;AACJD,IAAAA,EAAE,EAAE,CADA;AAEJE,IAAAA,QAAQ,EAAE;AAFN;AAHwB,CAAX,CAArB,C,CASA;;;AACA,MAAMqC,OAAO,GAAG,CAACC,KAAK,GAAG1C,YAAT,EAAuB2C,MAAvB,KAAkC;AAChD,SAAO7C,OAAO,CAAC4C,KAAD,EAASE,KAAD,IAAW;AAC/B,YAAQD,MAAM,CAACN,IAAf;AACE,WAAKX,gBAAL;AACEkB,QAAAA,KAAK,CAAChC,cAAN,GAAuB,IAAvB;AACAgC,QAAAA,KAAK,CAAC/B,WAAN,GAAoB,KAApB;AACA+B,QAAAA,KAAK,CAAC9B,YAAN,GAAqB,IAArB;AACA;;AACF,WAAKa,gBAAL;AACEiB,QAAAA,KAAK,CAAChC,cAAN,GAAuB,KAAvB;AACAgC,QAAAA,KAAK,CAAC/B,WAAN,GAAoB,IAApB;AACA+B,QAAAA,KAAK,CAAC3C,SAAN,CAAgB4C,OAAhB,CAAwBN,SAAS,CAACI,MAAM,CAACP,IAAR,CAAjC;AACA;;AACF,WAAKR,gBAAL;AACEgB,QAAAA,KAAK,CAAChC,cAAN,GAAuB,KAAvB;AACAgC,QAAAA,KAAK,CAAC9B,YAAN,GAAqB6B,MAAM,CAACG,KAA5B;AACA;;AACF,WAAKjB,mBAAL;AACEe,QAAAA,KAAK,CAAC7B,iBAAN,GAA0B,IAA1B;AACA6B,QAAAA,KAAK,CAAC5B,cAAN,GAAuB,KAAvB;AACA4B,QAAAA,KAAK,CAAC3B,eAAN,GAAwB,IAAxB;AACA;;AACF,WAAKa,mBAAL;AAA0B;AACxB,gBAAMiB,IAAI,GAAGH,KAAK,CAAC3C,SAAN,CAAgB+C,IAAhB,CAAsBvB,CAAD,IAAOA,CAAC,CAACvB,EAAF,KAASyC,MAAM,CAACP,IAAP,CAAYa,MAAjD,CAAb;AACAF,UAAAA,IAAI,CAACrC,QAAL,CAAcmC,OAAd,CAAsBL,YAAY,CAACG,MAAM,CAACP,IAAP,CAAY/B,OAAb,CAAlC;AACAuC,UAAAA,KAAK,CAAC7B,iBAAN,GAA0B,KAA1B;AACA6B,UAAAA,KAAK,CAAC5B,cAAN,GAAuB,IAAvB;AACA,gBALwB,CAMxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD,WAAKe,mBAAL;AACEa,QAAAA,KAAK,CAAC7B,iBAAN,GAA0B,KAA1B;AACA6B,QAAAA,KAAK,CAAC3B,eAAN,GAAwB0B,MAAM,CAACG,KAA/B;AACA;;AACF,WAAKd,mBAAL;AACEY,QAAAA,KAAK,CAAC1B,iBAAN,GAA0B,IAA1B;AACA0B,QAAAA,KAAK,CAACzB,cAAN,GAAuB,KAAvB;AACAyB,QAAAA,KAAK,CAACxB,eAAN,GAAwB,IAAxB;AACA;;AACF,WAAKa,mBAAL;AACEW,QAAAA,KAAK,CAAC1B,iBAAN,GAA0B,KAA1B;AACA0B,QAAAA,KAAK,CAACzB,cAAN,GAAuB,IAAvB;AACAyB,QAAAA,KAAK,CAAC3C,SAAN,GAAkB2C,KAAK,CAAC3C,SAAN,CAAgBiD,MAAhB,CAAwBzB,CAAD,IAAOA,CAAC,CAACvB,EAAF,KAASyC,MAAM,CAACP,IAA9C,CAAlB;AACA;;AACF,WAAKF,mBAAL;AACEU,QAAAA,KAAK,CAAC1B,iBAAN,GAA0B,KAA1B;AACA0B,QAAAA,KAAK,CAACxB,eAAN,GAAwBuB,MAAM,CAACG,KAA/B;AACA;;AACF;AACE,eAAOJ,KAAP;AAzDJ;AA2DD,GA5Da,CAAd;AA6DD,CA9DD;;AAgEA,eAAeD,OAAf","sourcesContent":["import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\nexport const initialState = {\n  mainPosts: [\n    {\n      id: 1,\n      User: {\n        id: 1,\n        nickname: 'nuri',\n      },\n      content: '첫번째 게시글 #hashtag #익스프레스',\n      Images: [\n        {\n          i: shortId.generate(),\n          src: 'https://gimg.gilbut.co.kr/book/BN003114/rn_view_BN003114.jpg',\n        },\n        {\n          id: shortId.generate(),\n          src: 'https://gimg.gilbut.co.kr/book/BN003326/rn_view_BN003326.jpg',\n        },\n        {\n          id: shortId.generate(),\n          src: 'https://gimg.gilbut.co.kr/book/BN002827/rn_view_BN002827.jpg',\n        },\n      ],\n      Comments: [\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: 'jam',\n          },\n          content: '신간이 출시되었군용ㅎ',\n        },\n        {\n          id: shortId.generate(),\n          User: {\n            id: shortId.generate(),\n            nickname: '네로',\n          },\n          content: 'Hiiiiii~',\n        },\n      ],\n    },\n  ],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n};\n\n//  faker 사용해서 데이터 만들기\ninitialState.mainPosts.concat\n  .Array(20)\n  .fill()\n  .map((v, i) => {});\n\n// action 객체 생성\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\n// 동적 action creator\nexport const addPost = (data) => ({\n  type: ADD_POST_REQUEST,\n  data,\n});\nexport const addComment = (data) => ({\n  type: ADD_COMMENT_REQUEST,\n  data,\n});\n\nconst dummyPost = (data) => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: 'nuri',\n  },\n  Images: [],\n  Comments: [],\n});\n\nconst dummyComment = (data) => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: 'nuri',\n  },\n});\n\n// reducer : 이전 상태를 액션을 통해 다음 상태로 만들어내는 함수(불변성 지키면서)\nconst reducer = (state = initialState, action) => {\n  return produce(state, (draft) => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      case ADD_COMMENT_SUCCESS: {\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n        // const postIndex = state.mainPosts.findIndex((v)=> v.id === action.data.postId);\n        // const post = state.mainPosts[postIndex];\n        // const Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = {...post, Comments}\n        // return {\n        //   ...state,\n        //   mainPosts,\n        //   addCommentLoading: false,\n        //   addCommentDone: true,\n        // };\n      }\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\n        break;\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      default:\n        return state;\n    }\n  });\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}