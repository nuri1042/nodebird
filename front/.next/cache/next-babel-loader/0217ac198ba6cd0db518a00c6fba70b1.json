{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/kimnuri/Desktop/Nuri/nodebird/front/components/CommentForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Button } from 'antd';\nimport useInput from '../hooks/useInput';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommmentDone = _useSelector.addCommmentDone,\n      addCommentLoading = _useSelector.addCommentLoading;\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  useEffect(function () {\n    if (addCommmentDone) {\n      setCommentText('');\n    }\n  }, [addCommmentDone]);\n  var onSubmitComment = useCallback(function () {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n    console.log(post.id, commentText);\n  }, [commentText, id]);\n  return __jsx(Form, {\n    onFinish: onSubmitComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(Form.Item, {\n    style: {\n      position: 'relative',\n      margin: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    onChange: onChangeCommentText,\n    value: commentText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    style: {\n      position: 'absolute',\n      right: 0,\n      bottom: -40,\n      zIndex: 1\n    },\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: addCommentLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, \"\\uC090\\uC57D\")));\n};\n\n_s(CommentForm, \"VYdhpbRrg0sgTZ0WR76CgnTVVqo=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useInput];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/components/CommentForm.js"],"names":["React","useCallback","useEffect","PropTypes","Form","Input","Button","useInput","useDispatch","useSelector","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","id","state","user","me","addCommmentDone","addCommentLoading","commentText","onChangeCommentText","setCommentText","onSubmitComment","type","data","content","postId","userId","console","log","position","margin","right","bottom","zIndex","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {Form, Input, Button} from 'antd';\nimport useInput from '../hooks/useInput';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {ADD_COMMENT_REQUEST} from '../reducers/post';\n\nconst CommentForm = ({post}) => {\n  const dispatch = useDispatch();\n  const id = useSelector(state => state.user.me?.id);\n  const {addCommmentDone, addCommentLoading} = useSelector(state => state.post);\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\n\n  useEffect(() => {\n    if (addCommmentDone) {\n      setCommentText('');\n    }\n  }, [addCommmentDone]);\n\n  const onSubmitComment = useCallback(() => {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {content: commentText, postId: post.id, userId: id},\n    });\n    console.log(post.id, commentText);\n  }, [commentText, id]);\n\n  return (\n    <Form onFinish={onSubmitComment}>\n      <Form.Item style={{position: 'relative', margin: 0}}>\n        <Input.TextArea rows={4} onChange={onChangeCommentText} value={commentText} />\n        <Button style={{position: 'absolute', right: 0, bottom: -40, zIndex: 1}} type=\"primary\" htmlType=\"submit\" loading={addCommentLoading}>\n          삐약\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired,\n};\nexport default CommentForm;\n"]},"metadata":{},"sourceType":"module"}