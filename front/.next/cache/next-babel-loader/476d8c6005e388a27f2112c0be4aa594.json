{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/kimnuri/Desktop/Nuri/nodebird/front/components/CommentForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Input, Button } from \"antd\";\nimport useInput from \"../hooks/useInput\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useInput = useInput(\"\"),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      commentText = _useInput2[0],\n      onChgnaeComment = _useInput2[1];\n\n  var onChangeComment = useCallback(function () {}, []);\n  var onSubmitCommentText = useCallback(function () {}, []);\n  return __jsx(React.Fragment, null, __jsx(Form, {\n    onFinish: onSubmitCommentText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    onChange: onChangeComment,\n    value: commentText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, \"Add Comment\")));\n};\n\n_s(CommentForm, \"2z3lIjc2mbcbGGfEPTHfAHwKFr8=\", false, function () {\n  return [useInput];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    User: PropTypes.object,\n    createdAt: PropTypes.object,\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Comments: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/components/CommentForm.js"],"names":["React","useCallback","PropTypes","Form","Input","Button","useInput","CommentForm","post","commentText","onChgnaeComment","onChangeComment","onSubmitCommentText","propTypes","shape","id","number","content","string","User","object","createdAt","Images","arrayOf","Comments","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;AACA,OAAOC,QAAP,MAAqB,mBAArB;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAChC,kBAAuCF,QAAQ,CAAC,EAAD,CAA/C;AAAA;AAAA,MAAOG,WAAP;AAAA,MAAoBC,eAApB;;AACA,MAAMC,eAAe,GAAGV,WAAW,CAAC,YAAM,CAAE,CAAT,EAAW,EAAX,CAAnC;AACA,MAAMW,mBAAmB,GAAGX,WAAW,CAAC,YAAM,CAAE,CAAT,EAAW,EAAX,CAAvC;AACA,SACE,4BACE,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEW,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD,CAAO,QAAP;AACE,IAAA,IAAI,EAAE,CADR;AAEE,IAAA,QAAQ,EAAED,eAFZ;AAGE,IAAA,KAAK,EAAEF,WAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBANF,CADF,CADF;AAYD,CAhBD;;GAAMF,W;UACmCD,Q;;;KADnCC,W;AAiBNA,WAAW,CAACM,SAAZ,GAAwB;AACtBL,EAAAA,IAAI,EAAEN,SAAS,CAACY,KAAV,CAAgB;AACpBC,IAAAA,EAAE,EAAEb,SAAS,CAACc,MADM;AAEpBC,IAAAA,OAAO,EAAEf,SAAS,CAACgB,MAFC;AAGpBC,IAAAA,IAAI,EAAEjB,SAAS,CAACkB,MAHI;AAIpBC,IAAAA,SAAS,EAAEnB,SAAS,CAACkB,MAJD;AAKpBE,IAAAA,MAAM,EAAEpB,SAAS,CAACqB,OAAV,CAAkBrB,SAAS,CAACkB,MAA5B,CALY;AAMpBI,IAAAA,QAAQ,EAAEtB,SAAS,CAACqB,OAAV,CAAkBrB,SAAS,CAACkB,MAA5B;AANU,GAAhB,EAOHK;AARmB,CAAxB;AAUA,eAAelB,WAAf","sourcesContent":["import React, { useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Input, Button } from \"antd\";\nimport useInput from \"../hooks/useInput\";\n\nconst CommentForm = ({ post }) => {\n  const [commentText, onChgnaeComment] = useInput(\"\");\n  const onChangeComment = useCallback(() => {}, []);\n  const onSubmitCommentText = useCallback(() => {}, []);\n  return (\n    <>\n      <Form onFinish={onSubmitCommentText}>\n        <Input.TextArea\n          rows={4}\n          onChange={onChangeComment}\n          value={commentText}\n        />\n        <Button>Add Comment</Button>\n      </Form>\n    </>\n  );\n};\nCommentForm.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    User: PropTypes.object,\n    createdAt: PropTypes.object,\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Comments: PropTypes.arrayOf(PropTypes.object),\n  }).isRequired,\n};\nexport default CommentForm;\n"]},"metadata":{},"sourceType":"module"}