{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\"; // 예외적으로 generator 아님\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    // call : 동기 함수 호출 (결과를 기다렸다가 다음 실행)\n    // fork : 비동기 함수 호출\n    //const result = yield call(logInAPI, action.data);\n    yield delay(1000); // put : dispatch 와 같은 역할, action을 dispatch 한다고 생각\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/sagas/user.js"],"names":["all","fork","delay","put","takeLatest","logInAPI","data","axios","post","logIn","action","type","LOG_IN_SUCCESS","err","LOG_IN_FAILURE","error","response","logOutAPI","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD,C,CAEA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP;AACD;;AACD,UAAUG,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA;AACA;AACA,UAAMR,KAAK,CAAC,IAAD,CAAX,CAJE,CAKF;;AACA,UAAMC,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAEC,cADE;AAERN,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAVD,CAUE,OAAOO,GAAP,EAAY;AACZ,UAAMV,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAEG,cADE;AAERC,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaV;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,SAASW,SAAT,GAAqB;AACnB,SAAOV,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP;AACD;;AACD,UAAUU,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMhB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAEQ;AADE,KAAD,CAAT;AAGD,GAND,CAME,OAAON,GAAP,EAAY;AACZ,UAAMV,GAAG,CAAC;AACRQ,MAAAA,IAAI,EAAES,eADE;AAERL,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaV;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUe,UAAV,GAAuB;AACrB,QAAMjB,UAAU,CAAC,gBAAD,EAAmBK,KAAnB,CAAhB;AACD;;AACD,UAAUa,WAAV,GAAwB;AACtB,QAAMlB,UAAU,CAAC,iBAAD,EAAoBc,MAApB,CAAhB;AACD;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAClC,QAAMvB,GAAG,CAAC,CAACC,IAAI,CAACoB,UAAD,CAAL,EAAmBpB,IAAI,CAACqB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\n\n// 예외적으로 generator 아님\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    // call : 동기 함수 호출 (결과를 기다렸다가 다음 실행)\n    // fork : 비동기 함수 호출\n    //const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    // put : dispatch 와 같은 역할, action을 dispatch 한다고 생각\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data,\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}\n"]},"metadata":{},"sourceType":"module"}