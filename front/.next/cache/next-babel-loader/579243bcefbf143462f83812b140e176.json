{"ast":null,"code":"import { all, fork, call, put, take, takeEvery, takeLatest, delay } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n} // EventListener 와 같은 역할\n// take : action이 실행될 때 까지 기다림\n// take 가 일회성이라 while take 로 사용해야 함 -> 동기적으로 동작\n// while (true) {\n//   yield take(\"LOG_IN_REQUEST\", logIn);\n// }\n//\n// takeEvery -> 비동기적으로 동작\n// yield takeEvery(\"LOG_IN_REQUEST\", logIn);\n//\n// 버튼이 실수로 여러번 눌렸을 때 takeEvery 로 하면 두번 실행됨\n// 이 문제 방지 위해 사용하는 것이 takeLatest\n// takeLatest -> 앞의 클릭은 무시되고 마지막것만 실행함\n// front 에서 backEnd 로 보낸 여러 '요청'들은 취소 할 수 없고\n// BackEnd 로 부터 받는 '응답'은 마지막 하나를 제외하고 전부 취소함\n//\n// 여러 클릭 중에 첫번째만 실행하려면 takeLeading\n//\n// throttle -> 시간을 설정해두면 해당 시간동안에는 요청도 한번만 실행 할 수 있음\n\n\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n} // rootSaga에 만들고 싶은 비동기 action들을 넣어줌\n\n\nexport default function* rootSaga() {\n  // all : 배열을 받아서 해당 배열을 한번에 실행시킴\n  yield all([fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n  fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/sagas/index.js"],"names":["all","fork","call","put","take","takeEvery","takeLatest","delay","axios","addPostAPI","data","post","addPost","action","type","result","err","response","watchLogIn","logIn","watchLogOut","logOut","watchAddPost","rootSaga"],"mappings":"AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,GAJF,EAKEC,IALF,EAMEC,SANF,EAOEC,UAPF,EAQEC,KARF,QASO,oBATP;AAUA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AACD,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA,UAAMJ,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAE,kBADE;AAERJ,MAAAA,IAAI,EAAEK,MAAM,CAACL;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,MAAM;AACN,UAAMP,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAE,kBADE;AAERJ,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAUQ,UAAV,GAAuB;AACrB,QAAMZ,UAAU,CAAC,gBAAD,EAAmBa,KAAnB,CAAhB;AACD;;AACD,UAAUC,WAAV,GAAwB;AACtB,QAAMd,UAAU,CAAC,iBAAD,EAAoBe,MAApB,CAAhB;AACD;;AACD,UAAUC,YAAV,GAAyB;AACvB,QAAMhB,UAAU,CAAC,kBAAD,EAAqBM,OAArB,CAAhB;AACD,C,CAED;;;AACA,eAAe,UAAUW,QAAV,GAAqB;AAClC;AACA,QAAMvB,GAAG,CAAC,CACRC,IAAI,CAACiB,UAAD,CADI,EACU;AAClBjB,EAAAA,IAAI,CAACmB,WAAD,CAFI,EAGRnB,IAAI,CAACqB,YAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import {\n  all,\n  fork,\n  call,\n  put,\n  take,\n  takeEvery,\n  takeLatest,\n  delay,\n} from \"redux-saga/effects\";\nimport axios from \"axios\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data,\n    });\n  } catch {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\n// EventListener 와 같은 역할\n// take : action이 실행될 때 까지 기다림\n// take 가 일회성이라 while take 로 사용해야 함 -> 동기적으로 동작\n// while (true) {\n//   yield take(\"LOG_IN_REQUEST\", logIn);\n// }\n//\n// takeEvery -> 비동기적으로 동작\n// yield takeEvery(\"LOG_IN_REQUEST\", logIn);\n//\n// 버튼이 실수로 여러번 눌렸을 때 takeEvery 로 하면 두번 실행됨\n// 이 문제 방지 위해 사용하는 것이 takeLatest\n// takeLatest -> 앞의 클릭은 무시되고 마지막것만 실행함\n// front 에서 backEnd 로 보낸 여러 '요청'들은 취소 할 수 없고\n// BackEnd 로 부터 받는 '응답'은 마지막 하나를 제외하고 전부 취소함\n//\n// 여러 클릭 중에 첫번째만 실행하려면 takeLeading\n//\n// throttle -> 시간을 설정해두면 해당 시간동안에는 요청도 한번만 실행 할 수 있음\nfunction* watchLogIn() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn);\n}\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield takeLatest(\"ADD_POST_REQUEST\", addPost);\n}\n\n// rootSaga에 만들고 싶은 비동기 action들을 넣어줌\nexport default function* rootSaga() {\n  // all : 배열을 받아서 해당 배열을 한번에 실행시킴\n  yield all([\n    fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n    fork(watchLogOut),\n    fork(watchAddPost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}