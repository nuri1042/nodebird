{"ast":null,"code":"import { all, fork, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\"; // 예외적으로 generator 아님\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\n\nfunction* logIn(action) {\n  try {\n    // call : 동기 함수 호출 (결과를 기다렸다가 다음 실행)\n    // fork : 비동기 함수 호출\n    const result = yield call(logInAPI, action.data); // put : dispatch 와 같은 역할, action을 dispatch 한다고 생각\n\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data\n    });\n  } catch {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data\n    });\n  } catch {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data\n    });\n  } catch {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data\n    });\n  }\n} // EventListener 와 같은 역할\n\n\nfunction* watchLogIn() {\n  // take : action이 실행될 때 까지 기다림\n  // take 가 일회성이라 while take 로 사용해야 함 -> 동기적으로 동작sdf\\\n  // while (true) {\n  //   yield take(\"LOG_IN_REQUEST\", logIn);\n  // }\n  // takeEvery -> 비동기적으로 동작\n  yield takeEvery(\"LOG_IN_REQUEST\", logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(\"LOG_OUT_REQUEST\", logOut);\n}\n\nfunction* watchAddPost() {\n  yield takeEvery(\"ADD_POST_REQUEST\", addPost);\n} // rootSaga에 만들고 싶은 비동기 action들을 넣어줌\n\n\nexport default function* rootSaga() {\n  // all : 배열을 받아서 해당 배열을 한번에 실행시킴\n  yield all([fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n  fork(watchLogOut), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/sagas/index.js"],"names":["all","fork","call","put","take","takeEvery","axios","logInAPI","data","post","logIn","action","result","type","err","response","logOutAPI","logOut","addPostAPI","addPost","watchLogIn","watchLogOut","watchAddPost","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,SAArC,QAAsD,oBAAtD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AACD,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA;AACA,UAAMC,MAAM,GAAG,MAAMV,IAAI,CAACK,QAAD,EAAWI,MAAM,CAACH,IAAlB,CAAzB,CAHE,CAIF;;AACA,UAAML,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAE,gBADE;AAERL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GATD,CASE,MAAM;AACN,UAAML,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAE,gBADE;AAERL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASQ,SAAT,GAAqB;AACnB,SAAOV,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACD;;AACD,UAAUQ,MAAV,GAAmB;AACjB,MAAI;AACF,UAAML,MAAM,GAAG,MAAMV,IAAI,CAACc,SAAD,CAAzB;AACA,UAAMb,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAE,iBADE;AAERL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,MAAM;AACN,UAAML,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAE,iBADE;AAERL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASU,UAAT,CAAoBV,IAApB,EAA0B;AACxB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AACD,UAAUW,OAAV,CAAkBR,MAAlB,EAA0B;AACxB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMV,IAAI,CAACgB,UAAD,EAAaP,MAAM,CAACH,IAApB,CAAzB;AACA,UAAML,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAE,kBADE;AAERL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAND,CAME,MAAM;AACN,UAAML,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAE,kBADE;AAERL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFX,KAAD,CAAT;AAID;AACF,C,CAED;;;AACA,UAAUY,UAAV,GAAuB;AACrB;AACA;AACA;AACA;AACA;AAEA;AACA,QAAMf,SAAS,CAAC,gBAAD,EAAmBK,KAAnB,CAAf;AACD;;AACD,UAAUW,WAAV,GAAwB;AACtB,QAAMhB,SAAS,CAAC,iBAAD,EAAoBY,MAApB,CAAf;AACD;;AACD,UAAUK,YAAV,GAAyB;AACvB,QAAMjB,SAAS,CAAC,kBAAD,EAAqBc,OAArB,CAAf;AACD,C,CAED;;;AACA,eAAe,UAAUI,QAAV,GAAqB;AAClC;AACA,QAAMvB,GAAG,CAAC,CACRC,IAAI,CAACmB,UAAD,CADI,EACU;AAClBnB,EAAAA,IAAI,CAACoB,WAAD,CAFI,EAGRpB,IAAI,CAACqB,YAAD,CAHI,CAAD,CAAT;AAKD","sourcesContent":["import { all, fork, call, put, take, takeEvery } from \"redux-saga/effects\";\nimport axios from \"axios\";\n\n// 예외적으로 generator 아님\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n}\nfunction* logIn(action) {\n  try {\n    // call : 동기 함수 호출 (결과를 기다렸다가 다음 실행)\n    // fork : 비동기 함수 호출\n    const result = yield call(logInAPI, action.data);\n    // put : dispatch 와 같은 역할, action을 dispatch 한다고 생각\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: result.data,\n    });\n  } catch {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data,\n    });\n  } catch {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: \"ADD_POST_SUCCESS\",\n      data: result.data,\n    });\n  } catch {\n    yield put({\n      type: \"ADD_POST_FAILURE\",\n      data: err.response.data,\n    });\n  }\n}\n\n// EventListener 와 같은 역할\nfunction* watchLogIn() {\n  // take : action이 실행될 때 까지 기다림\n  // take 가 일회성이라 while take 로 사용해야 함 -> 동기적으로 동작sdf\\\n  // while (true) {\n  //   yield take(\"LOG_IN_REQUEST\", logIn);\n  // }\n\n  // takeEvery -> 비동기적으로 동작\n  yield takeEvery(\"LOG_IN_REQUEST\", logIn);\n}\nfunction* watchLogOut() {\n  yield takeEvery(\"LOG_OUT_REQUEST\", logOut);\n}\nfunction* watchAddPost() {\n  yield takeEvery(\"ADD_POST_REQUEST\", addPost);\n}\n\n// rootSaga에 만들고 싶은 비동기 action들을 넣어줌\nexport default function* rootSaga() {\n  // all : 배열을 받아서 해당 배열을 한번에 실행시킴\n  yield all([\n    fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n    fork(watchLogOut),\n    fork(watchAddPost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}