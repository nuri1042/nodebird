{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork, call, put, take } from \"redux-saga/effects\";\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return take(\"LOG_IN\");\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return take(\"LOG_OUT\");\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return take(\"ADD_POST\");\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n} // rootSaga에 만들고 싶은 비동기 action들을 넣어줌\n\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n          fork(watchLogOut), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/kimnuri/Desktop/Nuri/nodebird/front/sagas/index.js"],"names":["watchLogIn","watchLogOut","watchAddPost","rootSaga","all","fork","call","put","take"],"mappings":";;oDAEUA,U;qDAGAC,W;qDAGAC,Y;qDAKeC,Q;;AAbzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;;AAEA,SAAUR,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,IAAI,CAAC,QAAD,CAAV;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUP,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMO,IAAI,CAAC,SAAD,CAAV;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA,SAAUN,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,IAAI,CAAC,UAAD,CAAV;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,eAAe,SAAUL,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEb,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACL,UAAD,CADI,EACU;AAClBK,UAAAA,IAAI,CAACJ,WAAD,CAFI,EAGRI,IAAI,CAACH,YAAD,CAHI,CAAD,CAAT;;AAFa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, call, put, take } from \"redux-saga/effects\";\n\nfunction* watchLogIn() {\n  yield take(\"LOG_IN\");\n}\nfunction* watchLogOut() {\n  yield take(\"LOG_OUT\");\n}\nfunction* watchAddPost() {\n  yield take(\"ADD_POST\");\n}\n\n// rootSaga에 만들고 싶은 비동기 action들을 넣어줌\nexport default function* rootSaga() {\n  // all : 배열을 받아서 해당 배열을 한번에 실행시킴\n  yield all([\n    fork(watchLogIn), // fork : 함수를 한번에 실행시킴\n    fork(watchLogOut),\n    fork(watchAddPost),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}